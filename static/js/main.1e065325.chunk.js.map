{"version":3,"sources":["components/tableInfo.jsx","components/slider.jsx","components/velib.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TableInfo","a","activeMarker","className","codeStation","nomStation","style","etatStation","color","nbBornesTotal","nbBornesDisponibles","nbVelosMecaniques","nbVelosElectriques","achatCB","recordTime","sliderThumbStyles","opacity","Styles","styled","div","props","Slider","this","maxMarkers","value","onChange","type","min","step","max","e","target","Component","Velib","state","rangeMarkers","markers","showingInfoWindow","selectedPlace","position","lat","lng","getUrl","rows","getMarkers","debounce","url","axios","get","data","nhits","records","forEach","hasOwnProperty","geometry","coordinates","Date","record_timestamp","toLocaleDateString","fields","station_code","station_name","station_state","nbedock","nbfreeedock","nbbike","nbebike","creditcard","push","setState","onChangeMarkersRange","onMarkerClick","marker","markerSource","find","m","uid","Object","assign","activePosition","onMapClicked","onClick","google","zoom","initialCenter","map","key","name","visible","id","fontSize","marginTop","GoogleApiWrapper","apiKey","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e065325.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TableInfo = ({ activeMarker: a }) => {\r\n  if (!a) return null;\r\n  return (\r\n    <table className=\"table table-bordered\">\r\n      <tbody>\r\n        <tr>\r\n          <th>\r\n            <span> Code de la station</span>\r\n          </th>\r\n          <td>\r\n            <span>{a.codeStation}</span>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            <span> Nom de la station</span>\r\n          </th>\r\n          <td>\r\n            <span>{a.nomStation}</span>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            <span> Etat de la station</span>\r\n          </th>\r\n          <td>\r\n            <span\r\n              style={\r\n                a.etatStation === \"Operative\"\r\n                  ? { color: \"green\" }\r\n                  : { color: \"red\" }\r\n              }\r\n            >\r\n              {a.etatStation}\r\n            </span>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            <span> Nombre de bornes en station</span>\r\n          </th>\r\n          <td>\r\n            <span>{a.nbBornesTotal}</span>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            <span> Nombre de bornes disponibles</span>\r\n          </th>\r\n          <td>\r\n            <span>{a.nbBornesDisponibles}</span>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            <span> Nombre de vélos mécaniques</span>\r\n          </th>\r\n          <td>\r\n            <span>{a.nbVelosMecaniques}</span>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            <span> Nombre de vélos électriques</span>\r\n          </th>\r\n          <td>\r\n            <span>{a.nbVelosElectriques}</span>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            <span> Achat possible en station (CB)</span>\r\n          </th>\r\n          <td>\r\n            <span\r\n              style={a.achatCB === \"no\" ? { color: \"red\" } : { color: \"green\" }}\r\n            >\r\n              {a.achatCB}\r\n            </span>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>\r\n            <span> Mis à jour le</span>\r\n          </th>\r\n          <td>\r\n            <span>{a.recordTime}</span>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default TableInfo;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst sliderThumbStyles = ({ color, opacity }) => `\r\n  width: 25px;\r\n  height: 25px;\r\n  background: ${color};\r\n  cursor: pointer;\r\n  outline: 5px solid #333;\r\n  opacity: ${opacity};\r\n  -webkit-transition: .2s;\r\n  transition: opacity .2s;\r\n`;\r\n\r\nconst Styles = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: #888;\r\n  margin-top: 2rem;\r\n  margin-left: 20px;\r\n  .slider {\r\n    flex: 6;\r\n    -webkit-appearance: none;\r\n    width: 100%;\r\n    height: 15px;\r\n    border-radius: 5px;\r\n    background: #efefef;\r\n    outline: none;\r\n    &::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      appearance: none;\r\n      ${props => sliderThumbStyles(props)}\r\n    }\r\n    &::-moz-range-thumb {\r\n      ${props => sliderThumbStyles(props)}\r\n    }\r\n  }\r\n`;\r\n\r\nexport default class Slider extends Component {\r\n  render() {\r\n    const { color, maxMarkers, value, onChange } = this.props;\r\n    return (\r\n      <Styles opacity={value > 10 ? value / maxMarkers : 0.1} color={color}>\r\n        <input\r\n          type=\"range\"\r\n          min={10}\r\n          step={10}\r\n          max={maxMarkers}\r\n          value={value}\r\n          className=\"slider\"\r\n          onChange={e => onChange(e.target.value)}\r\n        />\r\n      </Styles>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Map, InfoWindow, Marker } from \"google-maps-react\";\r\nimport axios from \"axios\";\r\nimport { debounce } from \"lodash\";\r\nimport TableInfo from \"./tableInfo\";\r\nimport Slider from \"./slider\";\r\n\r\nexport default class Velib extends Component {\r\n  state = {\r\n    maxMarkers: null,\r\n    rangeMarkers: 100,\r\n    markers: [],\r\n    showingInfoWindow: false,\r\n    activeMarker: null,\r\n    selectedPlace: { position: { lat: 48.8724200631, lng: 2.34839523628 } }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMarkers();\r\n  }\r\n\r\n  getUrl = rows => {\r\n    return (\r\n      \"https://opendata.paris.fr/api/records/1.0/search/?dataset=velib-disponibilite-en-temps-reel&rows=\" +\r\n      rows\r\n    );\r\n  };\r\n\r\n  getMarkers = debounce(async () => {\r\n    const url = this.getUrl(this.state.rangeMarkers);\r\n    const { data } = await axios.get(url);\r\n\r\n    const maxMarkers = data.nhits;\r\n    const markers = [];\r\n\r\n    data.records.forEach(e => {\r\n      if (e.hasOwnProperty(\"geometry\")) {\r\n        var lat = e.geometry.coordinates[1];\r\n        var lng = e.geometry.coordinates[0];\r\n        var recordTime = new Date(e.record_timestamp).toLocaleDateString();\r\n        var {\r\n          station_code: codeStation,\r\n          station_name: nomStation,\r\n          station_state: etatStation,\r\n          nbedock: nbBornesTotal,\r\n          nbfreeedock: nbBornesDisponibles,\r\n          nbbike: nbVelosMecaniques,\r\n          nbebike: nbVelosElectriques,\r\n          creditcard: achatCB\r\n        } = e.fields;\r\n\r\n        markers.push({\r\n          codeStation,\r\n          nomStation,\r\n          position: { lat, lng },\r\n          etatStation,\r\n          nbBornesTotal,\r\n          nbBornesDisponibles,\r\n          nbVelosMecaniques,\r\n          nbVelosElectriques,\r\n          achatCB,\r\n          recordTime\r\n        });\r\n      }\r\n\r\n      this.setState({ markers, maxMarkers });\r\n    });\r\n  }, 1000);\r\n\r\n  onChangeMarkersRange = rangeMarkers => {\r\n    this.setState({ rangeMarkers });\r\n    this.getMarkers(rangeMarkers);\r\n  };\r\n\r\n  onMarkerClick = (props, marker, e) => {\r\n    const markerSource = this.state.markers.find(\r\n      m => m.codeStation === marker.uid\r\n    );\r\n    Object.assign(marker, markerSource);\r\n    this.setState({\r\n      activeMarker: marker,\r\n      activePosition: marker.position,\r\n      selectedPlace: props,\r\n      showingInfoWindow: true\r\n    });\r\n  };\r\n\r\n  onMapClicked = props => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      markers,\r\n      maxMarkers,\r\n      activeMarker,\r\n      selectedPlace,\r\n      showingInfoWindow,\r\n      rangeMarkers\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"map col-md-4\">\r\n          <Map\r\n            onClick={this.onMapClicked}\r\n            google={this.props.google}\r\n            zoom={12}\r\n            initialCenter={{\r\n              lat: selectedPlace.position.lat,\r\n              lng: selectedPlace.position.lng\r\n            }}\r\n          >\r\n            {markers.map(marker => (\r\n              <Marker\r\n                uid={marker.codeStation}\r\n                key={marker.codeStation}\r\n                name={marker.nomStation}\r\n                position={marker.position}\r\n                onClick={this.onMarkerClick}\r\n                opacity={0.3}\r\n              />\r\n            ))}\r\n\r\n            <InfoWindow marker={activeMarker} visible={showingInfoWindow}>\r\n              <div>\r\n                <h6>{selectedPlace.name}</h6>\r\n              </div>\r\n            </InfoWindow>\r\n          </Map>\r\n        </div>\r\n        <div id=\"infos\" className=\"col text-center\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <h3>Vélib' - Disponibilité temps réel</h3>\r\n            </div>\r\n            <div className=\"col-md-12 mt-4\">\r\n              <p className=\"text-nowrap mb-4\">\r\n                <span\r\n                  style={{\r\n                    fontSize: \"20px\",\r\n                    marginTop: \"-30px\"\r\n                  }}\r\n                >\r\n                  {rangeMarkers}\r\n                </span>{\" \"}\r\n                marqueurs de stations <i>efe</i> vont s'afficher sur la carte,\r\n                cliquez dessus.\r\n              </p>\r\n              <Slider\r\n                onChange={this.onChangeMarkersRange}\r\n                maxMarkers={maxMarkers}\r\n                value={rangeMarkers}\r\n                color=\"red\"\r\n              />\r\n            </div>\r\n            <div className=\"col tableInfos\">\r\n              {activeMarker ? <TableInfo activeMarker={activeMarker} /> : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport { GoogleApiWrapper } from \"google-maps-react\";\nimport Velib from \"./components/velib\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return <Velib />;\n};\n\nexport { App };\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyD7fqhPuLV6HNyLtwQnKB8WMQyuAbME45g\"\n})(Velib);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}